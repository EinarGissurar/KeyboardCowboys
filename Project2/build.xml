<project name="main.Main" basedir="." default="build">

    <!-- Build variables -->
    <property name="src.dir"        value="src"/> <!-- Source directory -->
    <property name="test.dir"    value="test"/> <!-- Test directory -->
    <property name="main-class"  value="main.Main"/> <!-- Main class -->

    <property name="lib.dir"        value="lib"/> <!-- Library directory -->

    <property name="build.dir"      value="build"/> <!-- Build directory -->
    <property name="jar.dir"     value="${build.dir}/jar"/> <!-- Jar directory -->
    <property name="classes.dir"    value="${build.dir}/classes"/> <!-- ProgramClass directory -->
    <property name="test.classes.dir" value="${build.dir}/test-classes"/> <!-- TestClass directory -->
    <property name="instr.classes.dir" value="${build.dir}/instr-classes" /> <!-- InstrumentClass directory -->
    <property name="doc.dir"        value="doc"/>               <!-- Documentation, code coverage and inspection -->
    <property name="coverage.dir"   value="${doc.dir}/coverage"/> <!-- Coverage directory -->
    <property name="checkstyle.dir" value="${doc.dir}/checkstyle"/> <!-- Checkstyle directory -->
    <property name="javadoc.dir"    value="${doc.dir}/javadoc"/> <!-- Javadoc directory -->
    <property name="run.file" value="TicTacToe.bat" /> <!-- Executable bat file -->

    <!-- Classpaths -->
    <path id="compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="test.compile.classpath">
        <path refid="compile.classpath" />
        <pathelement location="${lib.dir}/junit-4.9.jar" />
        <pathelement location="${classes.dir}" />
    </path>

    <path id="junit.classpath">
          <path refid="test.compile.classpath" />
          <pathelement location="${test.classes.dir}" />
    </path>

    <path id="emma.classpath" >
        <pathelement location="${lib.dir}/emma.jar" />
        <pathelement location="${lib.dir}/emma_ant.jar" />
    </path>

    <path id="checkstyle.classpath">
        <pathelement location="${lib.dir}/checkstyle-5.6-all.jar"/>
    </path>

    <!-- Task imports -->
    <taskdef resource="emma_ant.properties" classpathref="emma.classpath" /> 
    <taskdef resource="checkstyletask.properties"  classpathref="checkstyle.classpath"/>


    <!-- Clean build -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${doc.dir}"/>
        <delete file="${run.file}"/>
    </target>

    <!-- Initialize build -->
    <target name="initialize" depends="clean">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${jar.dir}"/>
        <mkdir dir="${doc.dir}"/>
    </target>

    <!-- Code Inspection -->
    <target name="checkstyle"
            depends="initialize" 
            description="Generates a report of code convention violations.">
        <mkdir dir="${checkstyle.dir}" />

        <checkstyle config="style_check.xml">
            <fileset dir="${src.dir}" includes="**/*.java"/>
            <formatter type="plain" toFile="${checkstyle.dir}/checkstyle_errors.txt"/>
            <formatter type="xml" toFile="${checkstyle.dir}/checkstyle_errors.xml"/>
        </checkstyle>
    </target>

    <!-- Javadoc documentation -->
    <target name="javadoc" depends="initialize"> 
        <mkdir dir="${javadoc.dir}"/> 
        <javadoc destdir="${javadoc.dir}" windowtitle="TicTacToe documentation">  
            <sourcepath location="${src.dir}"/>  
            <classpath location="${classes.dir}"/>  
        </javadoc>  
    </target>



    <!-- Compile code and tests -->
    <target name="compile" depends='initialize'>
        <javac srcdir="${src.dir}"  destdir="${classes.dir}" classpathref="compile.classpath"
               source="1.6" target="1.6" includeantruntime="false"/>
        <javac srcdir="${test.dir}" destdir="${test.classes.dir}" classpathref="test.compile.classpath"
               source="1.6" target="1.6" includeantruntime="false"/>
    </target>

    <!-- Create Jar file -->
    <target name="jar" depends="compile">
        <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
        <echo file="${run.file}">
            java -jar build/jar/main.Main.jar
        </echo>
    </target>

    <!-- Run tests (Including code coverage) -->
    <target name="test" depends="jar">
        <property name="emma.enabled" value="true" />
        <mkdir dir="${coverage.dir}" />
        <mkdir dir="${instr.classes.dir}" />

        <!-- Copy base class files -->
        <copy todir="${instr.classes.dir}">
            <fileset dir="${classes.dir}" />
        </copy>

        <!-- Instrument class files -->
        <emma enabled="${emma.enabled}" >
            <instr instrpath="${instr.classes.dir}"
                metadatafile="${coverage.dir}/metadata.emma"
                merge="true"
                mode="overwrite"
            />
        </emma>

        <junit printsummary="yes">
            
            <classpath>
                <pathelement location="${instr.classes.dir}"/>
                <pathelement location="${test.classes.dir}"/>
                <path refid="junit.classpath"/>
                <path refid="emma.classpath" />
            </classpath>
            <jvmarg value="-Demma.coverage.out.file=Project2/${coverage.dir}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=true" />

            <batchtest fork="yes">
                <fileset dir="${test.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>

        <emma enabled="${emma.enabled}" >
            <report sourcepath="${src.dir}" >
                <fileset dir="${coverage.dir}" >
                    <include name="*.emma" />
                </fileset>

                <txt outfile="Project2/${coverage.dir}/coverage.txt" />
                <html outfile="Project2/${coverage.dir}/coverage.html" />
            </report>
        </emma>
    </target>


    <!-- Run executable -->
    <target name="run" depends="jar">
        <java jar="${jar.dir}/${ant.project.name}.jar" fork="true">
        </java>
    </target>


    <!-- Run complete build process-->
    <target name="build" depends="clean, initialize, javadoc, checkstyle, compile, jar, test"/>


</project>